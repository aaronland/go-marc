// Code generated by go-bindata.
// sources:
// static/javascript/marc-034.js
// static/css/marc-034.css
// DO NOT EDIT!

package http

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticJavascriptMarc034Js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xdd\x6e\xdb\x38\x13\xbd\x96\x9e\x62\xc0\x9b\x4a\x2d\xad\xb8\x4d\x03\x7c\x88\x21\x7c\xd8\x16\x01\xda\xdd\x24\x05\x9c\x2e\xba\x80\x1b\x04\xb4\x34\x76\xd8\x52\x24\x4b\x52\x71\xbc\x81\xdf\x7d\x41\xea\xc7\x8a\xe3\x1a\xc9\x8d\x6c\x69\x66\xce\x0c\xcf\x1c\x0e\x79\xf4\x1a\x2a\x66\x8a\x9b\xf1\xf1\xfb\xec\x87\x85\xd7\x47\x71\xbc\xe2\xb2\x54\xab\x8c\x95\xe5\xd9\x1d\x4a\x77\xce\xad\x43\x89\x26\x21\x42\xb1\x92\x50\x58\xd4\xb2\x70\x5c\x49\xf0\xef\x09\x7a\x9f\xf4\x21\x8e\x01\x00\xee\x98\x81\x8a\xe9\x49\x78\x09\x0f\xbe\x80\xe4\x3c\xbb\x60\xfa\x5f\x94\x29\x3c\xc4\x71\xe4\x7d\x98\xe6\x37\x3f\x71\x0d\x39\x94\xaa\xa8\x2b\x94\x2e\x9b\xab\x72\x9d\x2d\xd1\xfd\xe1\x9c\xe1\xf3\xda\x61\x42\x4a\xe6\xd8\xa8\x0a\xa1\x23\xa6\xf9\xe8\x27\xae\x49\x3a\x89\xa3\x0e\x2f\x63\x9a\xff\x15\x50\x5a\xbc\x49\x1c\x35\xf8\x15\xd3\x37\x4a\x3b\x0b\x39\x3c\x80\x63\x72\x69\x58\xf5\x45\xfb\xa2\xed\x29\x3c\xc4\x91\xaf\xcc\x16\x28\xf1\x14\x7a\xb0\x0f\xcc\x62\xc5\xf4\x95\x5b\x0b\xb4\xd9\x14\x17\x5c\x88\x38\xda\x6c\x02\x68\xc5\x34\xe4\x5b\xdf\x8a\xe9\xe4\x55\xc5\xf4\x2b\xda\xa7\x4a\xfb\xe4\x76\x05\x39\xcc\x60\x74\x72\x42\x61\xf4\xf6\x7f\x63\xb8\x9e\x34\x06\x89\xc1\xe0\xbf\x0f\x3f\xcf\x55\x2d\x4b\x1b\x4c\x76\x45\xbd\xd7\x75\x97\x33\x5b\x70\xf7\x21\x98\x93\xc6\x2b\x6d\xa8\xdd\x34\x74\xa3\xb0\xd8\x73\x8a\x62\x48\xe7\x12\xdd\x99\x40\xff\xf7\xc3\xfa\x73\x99\x90\x8a\xe9\xc0\x1d\x8a\x8c\x4b\x89\xe6\x2b\xde\x3b\xc8\x81\x5c\x30\x6d\x81\x19\x84\x92\x5b\x36\x17\x58\xc2\x1c\x0b\x56\x5b\x84\x86\x78\x2f\x0a\x6e\x41\x2a\x07\xda\xa0\xf5\xd0\xa4\x2f\xa2\xef\x72\xe0\xfc\x70\x7a\x53\x8c\xc6\xc7\xef\xbb\xd8\x2a\xbb\x63\xa2\xf6\x7c\x10\x32\x79\x8c\x63\x0f\xe1\xd8\x7a\x5e\x71\xd7\xa1\x84\x87\xcd\x94\x2c\x04\x2f\x7e\x42\xde\x4b\x33\x49\x3b\x56\x9e\x5d\x55\xe4\x3d\xdb\xb2\xfa\x37\x67\x78\x95\x34\x9d\xf5\x42\xae\x20\xf7\x05\xa7\xad\x82\x0c\xba\xda\x48\x58\x30\x61\x7d\xc8\xa6\x13\x00\xca\x02\x72\xff\x54\x25\xfe\x3d\xfd\xfc\x51\x55\x5a\x49\x94\x2e\xa9\xd2\xb6\xe5\xb5\xf1\xcd\x12\xaa\x60\xbe\xda\x4c\x1b\xe5\x54\xa1\x04\xbc\x01\x72\x74\x44\xe0\xcd\xd6\x74\xab\xac\x0b\x9f\xe7\x73\x75\xff\xff\xf1\xf1\xfb\xdc\x9b\x51\x16\xbd\xdc\x0c\x5b\x1d\x5a\xa3\x61\xab\xb0\x3c\xc3\x56\x4d\xe7\x3f\x7d\xbd\x38\x6f\x79\x6f\x11\x3c\x34\x1e\xa4\xbd\xf1\x08\x38\xcd\xdf\x27\x50\x2d\x41\x4c\x77\xe4\xfc\x76\x27\x74\xc6\x3d\xbb\xa1\x33\xed\xdf\x11\xa1\xe3\xe1\xf9\x9b\x9d\xb1\xed\x80\x92\x37\xb6\x2e\x0a\xb4\x76\x28\x0a\x63\xfb\xea\x06\x35\x3a\x03\x39\xfc\x79\xf5\xe5\x32\xb3\xce\x70\xb9\xe4\x8b\xb5\xf7\xa4\x20\x6b\x21\x28\xbc\x4b\x07\x85\x69\x83\x43\x9a\x0a\x83\xcc\x61\xcb\x54\x42\xb4\x41\xd2\x79\x6b\x83\x19\xd3\x1a\x65\xf9\xf1\x96\x8b\x32\xd9\x89\xf1\xdb\xef\x52\x95\x98\xd4\x46\xa4\x2f\x8d\x21\xdf\xe5\x77\x49\xd2\x74\x12\x45\x51\xf4\xb2\x50\xeb\x4c\x9f\x6e\xbb\xac\x67\x4a\x28\x68\x9e\xad\x1e\x25\xd2\x06\x9f\xe2\x79\x8d\x40\x0e\xc6\xea\x59\x90\x0e\x19\x36\xb7\xe2\xd2\x1b\xfd\xf7\xd9\x78\xc7\xb0\xee\x0c\x6f\x1f\x19\xd8\x7d\x1f\xf1\x6e\xc7\xd0\x47\x1c\x5f\x3f\x29\xa3\x50\xca\x04\x19\x3d\xc4\x51\x44\xae\x28\x7c\xa3\x70\x49\xe1\x8c\x9c\xc2\x2c\x64\xa3\xa1\x18\x1a\x70\x68\x93\xe6\x9a\x7a\xdf\x6f\x14\xae\x28\x9c\x51\xb8\xec\x7c\xef\x69\x17\xc1\xee\xdb\x88\xd6\xf7\x32\x38\x7a\xf4\xc6\xb7\xc7\xa2\x83\x1c\xc1\xb7\x19\x9a\x3b\x45\xd6\xe2\x80\xa2\x6a\x41\x1e\xb3\xbb\x50\x06\x12\x1f\x26\xd8\x1c\x05\x70\xd9\x2e\x32\x0d\x6b\x8c\xa3\x68\x40\x7f\x63\x99\x05\x4f\x4f\x4e\xd4\xca\xfd\xa6\xb5\xfb\x9f\xec\x87\xe2\x32\x21\x34\xa4\xe9\xe2\xfd\xdc\x3a\x50\x94\x37\x37\xfe\xfe\xdf\x73\x65\x17\xb2\xa6\xc3\x34\x82\x1f\x48\x22\x78\x93\x42\xf0\x67\x25\x68\xe8\x78\x03\x04\x48\xba\x2f\xce\x57\xda\xe5\xae\xc5\x23\x93\xe0\x1d\xc5\x4f\x7a\xf3\xa2\xc1\xe8\x83\xda\xe1\x38\x84\xaf\x45\xea\xa7\x63\x77\x17\x6a\x27\xe4\xf0\xa2\x30\x54\x49\xd7\xa6\x76\x38\x0e\x85\x39\x60\x6e\xff\x7c\x6c\x26\x5f\x77\xeb\xd1\xac\x2c\xb9\x5c\x9e\xc2\xec\x64\x4c\xe1\x64\x7c\x0d\x9b\x16\x61\xdf\xf4\xa4\xd0\xdd\x61\xfa\xee\xb0\x35\x9a\x70\xe7\x59\xa2\xf2\xe3\x31\x8c\xcf\x40\xad\xb7\xf8\xeb\xe1\x57\x15\x96\xb3\x65\x6f\xd3\x6b\x35\x4c\x15\xfc\x05\x39\x48\x5c\xc1\x3f\x17\xe7\x9f\x9c\xd3\x53\xfc\x55\xa3\x75\xed\x81\x6a\xf0\x57\xa6\xa4\xbf\x43\xee\x1c\xdc\x83\x26\x38\xb3\x86\x8e\x2d\x7f\x1b\xec\x26\xb5\x66\xc6\x62\xe2\x6e\xb9\xcd\x0c\x5a\xad\xa4\x0d\x52\xd8\xdb\xc8\x82\xb9\xe2\x16\x12\x0c\xb4\x17\x4a\x5a\x25\x30\x13\x6a\x99\x90\xb3\xe9\xf4\xcb\x94\x50\x68\x94\xb1\x73\x9a\x3f\xc1\xd9\x9e\x29\x89\x2f\x25\x9c\x37\xdb\x85\x68\x94\x09\x59\xa2\x23\xd4\x1f\xee\x14\x9c\xa9\x03\xac\x37\x5a\x94\x65\xbf\xe8\x61\x92\x26\xc7\x26\x9d\xc4\xff\x05\x00\x00\xff\xff\xe3\x81\x0b\xc1\x87\x0b\x00\x00")

func staticJavascriptMarc034JsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptMarc034Js,
		"static/javascript/marc-034.js",
	)
}

func staticJavascriptMarc034Js() (*asset, error) {
	bytes, err := staticJavascriptMarc034JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/marc-034.js", size: 2951, mode: os.FileMode(420), modTime: time.Unix(1515867012, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssMarc034Css = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\xae\xeb\x20\x0c\x5c\x37\x5f\xe1\xab\xea\x6e\x2a\xd1\xa6\x6a\xef\x86\x7c\x0d\x01\x27\x41\x17\x30\x02\x7a\x92\x9c\xea\xfc\xfb\x11\x79\xf4\x9d\x1d\x13\x7b\x66\x3c\xf6\x61\x07\xe5\xe9\xbc\x97\x31\xc2\xee\x50\x14\x35\xa9\x11\xae\x05\xe4\xaf\x21\x97\x58\x23\xac\x36\x23\x87\x28\x5c\x64\x11\x83\x6e\xaa\xe2\xa7\x28\x24\x29\x84\x2b\xcc\x85\x92\x0c\x05\x0e\x75\xa0\xde\x4d\x7f\xf7\x81\xfa\x95\xc5\x8a\xd0\x6a\xc7\x0c\x36\x89\x9f\xfe\x56\x4f\x60\xd0\x6d\xf7\x8e\x26\xf2\xfc\xf8\x82\xd5\x94\x12\x59\x0e\x19\xcf\x02\x5e\x38\x34\xab\x44\xaf\x55\xea\x38\x9c\xcb\x7b\xd3\xc0\xde\x41\xed\x58\x87\x93\x22\x9c\xcb\xd2\x0f\x0f\xc5\x9f\xf0\xc6\x90\x48\x3c\xfb\x5e\x80\x9a\x82\xc2\xc0\x23\x19\xad\x20\x75\x7a\x9e\xd5\x07\x5c\x7d\x78\xa1\x94\x76\x2d\x87\x23\xda\xea\x21\xc3\xa8\xbf\x91\x47\x2b\x8c\xa9\x3e\x24\x6b\xc9\x51\xf4\x42\xe2\x44\xb7\xad\x6b\x1a\x30\xc2\xb5\x78\x7c\x5d\xf2\xac\x9b\x39\x0b\x0e\x93\xc7\xcd\x4d\x6d\x7a\x3e\x17\x1b\x9d\xeb\x8d\x8e\x89\xc5\x34\x1a\x64\x69\xf4\xc8\x1d\x39\xac\x56\x9a\x35\xd2\xfd\xe9\x5f\x76\x9b\xfb\xad\xf0\xab\xae\x15\x41\xae\x63\x2d\x3b\xb8\xef\xe9\x65\x29\xa5\x1f\xe0\x8f\xb6\x9e\x42\x12\x2e\xcd\x54\x41\xdc\x0e\x80\xbe\x30\x34\x86\x7a\x0e\x51\x06\xba\x65\x50\x0b\xf9\xbf\x0d\x74\x71\x8a\xcd\xf7\xb3\x95\x52\x2e\xcd\x18\x2f\x26\x2d\x19\xfc\x06\x00\x00\xff\xff\xb1\x21\xa2\x5b\xa1\x02\x00\x00")

func staticCssMarc034CssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMarc034Css,
		"static/css/marc-034.css",
	)
}

func staticCssMarc034Css() (*asset, error) {
	bytes, err := staticCssMarc034CssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/marc-034.css", size: 673, mode: os.FileMode(420), modTime: time.Unix(1515858735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/javascript/marc-034.js": staticJavascriptMarc034Js,
	"static/css/marc-034.css": staticCssMarc034Css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"marc-034.css": &bintree{staticCssMarc034Css, map[string]*bintree{}},
		}},
		"javascript": &bintree{nil, map[string]*bintree{
			"marc-034.js": &bintree{staticJavascriptMarc034Js, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
