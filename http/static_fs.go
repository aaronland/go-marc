// Code generated by go-bindata.
// sources:
// static/javascript/marc-034.js
// static/css/index.css
// static/css/marc-034.css
// DO NOT EDIT!

package http

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticJavascriptMarc034Js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xdf\x6f\xdb\x36\x10\x7e\x96\xff\x8a\x03\x9f\xa8\x96\x53\xb2\x26\x4f\x0b\x84\x01\x2b\x0c\xb4\x5b\xea\x00\x4e\x87\x0c\x08\x8a\x80\x91\xce\x09\x3b\x8a\x54\x48\x2a\xb6\x51\xf8\x7f\x1f\x4e\xa4\x64\xb9\x5d\x8d\xe4\xc1\x3f\x78\xf7\xdd\xdd\x77\xdf\x51\xa7\x93\x37\xd0\x48\x57\xdd\x9d\x9e\x9d\x17\x5f\x3d\xbc\x39\x99\xcd\xd6\xca\xd4\x76\x5d\xc8\xba\x9e\x3f\xa3\x09\x97\xca\x07\x34\xe8\x38\xd3\x56\xd6\x4c\xc0\xaa\x33\x55\x50\xd6\x00\x9d\x39\x12\x26\xff\x36\x9b\x65\xd9\xb3\x74\xd0\x40\x09\xb5\xad\xba\x06\x4d\x28\x1e\x30\xcc\x35\xd2\xdf\x3f\xb6\x1f\x6b\xce\xa8\xd2\x2f\xa7\x67\xe7\x2c\xbf\x98\x65\x59\x53\x3c\x4b\xdd\x21\x94\xc0\xd8\xc5\x10\xef\x8f\xc5\xfb\xee\xbe\x51\x81\xa2\x67\x59\xe6\x0b\x6b\x2a\xad\xaa\x7f\xa1\x1c\x29\xf1\x48\xe4\xb5\x4c\x32\xc2\x26\x3a\x93\x73\x70\xaa\xe1\x11\x40\x1f\xb5\x02\xde\x40\x49\x74\xf3\x6f\x64\xc8\x1c\x86\xce\x19\x58\x49\xed\x63\xdc\x6e\xac\xee\xe4\xfa\x58\x7d\x27\xd7\xa9\xb4\x93\xeb\x42\x19\x83\xee\xc3\xe7\x4f\x97\x7b\x2d\xfa\x24\xf7\xf7\x76\x83\x47\x15\x89\x88\x94\x2a\x1e\x7e\x9a\xcd\x9a\x3b\xdf\x55\x15\x7a\x3f\x55\xcc\xf9\x36\x75\x53\x59\xe3\xad\xc6\x42\xdb\x07\xce\xae\xfe\x62\x02\xc8\x17\xe3\xe3\x6c\x82\x83\x12\xfe\xbc\xbe\x5a\x14\x3e\x38\x65\x1e\xd4\x6a\x4b\xf1\x02\x4c\xa7\xb5\x80\x77\x91\x46\x8f\x6d\x1d\x4e\x79\x57\x0e\x65\xc0\x44\x9d\xb3\xd6\x61\xe2\x9c\xb5\x0e\x0b\xd9\xb6\x68\xea\xf7\x8f\x4a\xd7\xfc\xbb\x90\xcf\xb8\x09\x0b\x5b\x23\xf7\xc1\xe5\x53\x32\x2f\x16\xb8\x57\x78\x5a\xa1\x75\x38\x4d\x44\xaa\x41\x49\xbd\xde\xf6\x72\xb2\x2f\xfb\x2e\x1a\x65\xc8\x47\xe6\xdb\xd3\x43\xfb\x76\xb0\xff\x3a\xb5\xcb\xcd\x88\x7f\x77\x68\x1f\xf1\x67\xc9\x3e\x3a\x2b\x6b\x5d\x4d\x33\x89\x63\xc8\xd8\xf5\x8d\x80\xc5\x9c\xfd\x06\xb7\x7d\x21\xd1\xd3\x10\x7d\x12\x11\x4b\x7c\x11\x09\x7a\x73\x2d\x60\xbe\x18\xa0\x1b\x31\x04\xc8\x4d\x0a\xd8\x43\x17\x73\x01\xd7\x37\x11\x3a\x66\x12\x93\x0a\x03\x74\xb7\xd7\xa6\xd3\x47\x86\xd8\x69\x36\xe8\xb8\xb2\x0e\x38\x05\x68\x79\x8f\x1a\x94\x49\x4d\xe5\xa9\xa7\x48\x61\xa2\x76\x74\xdf\xf6\xf0\xa4\xc7\x70\xc5\xee\x12\x84\x7e\x8a\xaf\x56\x19\xce\xc4\x58\x28\x09\x56\x1f\xbb\x5c\xe4\x1e\x66\x9f\xd1\xe1\xa5\xf7\xab\xaf\x9c\x1f\x94\xd2\xea\x48\x21\xad\xc6\x32\x5a\xbd\xa8\x48\x94\xe7\x2d\x30\x60\xf9\x4f\x42\x89\xf0\x48\xa1\xd3\x07\x3e\xad\x52\xd0\xee\xf0\xfa\xbe\x62\x47\x0c\x4b\x62\x9a\xb6\xd3\xd1\xb7\xdb\xef\x0a\x87\x4f\x50\x82\xc1\x35\xfc\xf3\xe9\xf2\x43\x08\xed\x12\x9f\x3a\xf4\x81\x27\x6a\x0e\x9f\x0a\x6b\xe8\x05\xf0\x3f\xdb\x37\x0b\x6e\x3b\x5c\x66\x4a\x56\xcb\x20\x87\xc5\xd1\x4a\xe7\x91\x87\x47\xe5\x0b\x87\xbe\xb5\xc6\xf7\xea\x1c\xf6\x55\xc9\x50\x3d\x02\xc7\xb4\x98\x0e\x37\xd3\x7c\xb9\xbc\x5a\x32\x01\x38\x08\xf8\xc3\x16\x1e\xd2\xec\x17\x1e\x27\x0a\x3f\x34\x89\xa6\x82\x92\xbe\x6d\x8d\x7f\x2f\x3f\xbe\xb7\x4d\x6b\x0d\x4d\xb6\x89\xd0\xfe\x09\x70\xf4\x08\x68\x5b\x49\xea\xb0\x68\x9d\x0d\xb6\xb2\xfd\x0c\x4f\x4e\x18\xbc\xdd\xbb\x1e\xad\x0f\xbd\x99\x14\xfe\xfd\xf4\xec\xbc\x24\x37\x9a\x6a\x7c\x81\xf4\xa2\xb5\x68\x38\x7b\xc0\xc0\x04\xe5\x16\x10\x5c\x97\x3a\x21\xb7\x47\x53\x4f\x5e\x39\xdf\xb7\xb6\x9b\x65\xbb\xfc\xe2\xbf\x00\x00\x00\xff\xff\x02\x86\xe5\x10\xb4\x07\x00\x00")

func staticJavascriptMarc034JsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptMarc034Js,
		"static/javascript/marc-034.js",
	)
}

func staticJavascriptMarc034Js() (*asset, error) {
	bytes, err := staticJavascriptMarc034JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/marc-034.js", size: 1972, mode: os.FileMode(420), modTime: time.Unix(1515784307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x52\xc8\xcc\x4b\x49\xad\xd0\x4b\x2e\x2e\x56\xd0\xd2\xe7\x02\x04\x00\x00\xff\xff\xb6\x36\x3a\x81\x10\x00\x00\x00")

func staticCssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssIndexCss,
		"static/css/index.css",
	)
}

func staticCssIndexCss() (*asset, error) {
	bytes, err := staticCssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/index.css", size: 16, mode: os.FileMode(420), modTime: time.Unix(1515775327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssMarc034Css = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xd1\x6e\xf2\x30\x0c\x85\xaf\xe9\x53\xf8\x17\xfa\x6f\x90\x02\x45\x70\x95\x3d\x4d\x9a\xa6\x6d\x34\x27\x8e\x1c\x33\xca\xd0\xde\x7d\x6a\x69\xa1\xc0\x72\x97\x4f\xb6\xcf\x39\xf6\x6e\x03\xe5\xe1\xb8\xb5\x39\xc3\x66\x57\x14\x5b\xa6\x33\x5c\x0b\x18\x5e\x30\xdc\xfa\xa8\xd0\x35\xa2\x0f\xff\x3f\x9e\x20\xfb\xb6\x7b\xa7\x42\x49\xef\x5f\x58\x45\x22\x14\x34\x0c\xfc\xa7\x28\xb6\xc9\x44\x87\xb3\xc4\xd9\xd7\xd2\x69\x38\x96\x8f\xa6\x5e\xbd\x43\x1f\x55\xe7\x46\x45\x38\x96\x65\xea\x17\xc5\x7f\xf1\x06\xc9\x88\x1e\x7c\x4f\xa0\x22\xae\x1d\xeb\x4c\xe8\x6b\x90\xce\xc7\xd1\x4a\x62\x37\xfb\x48\xa6\xae\x7d\x6c\x35\xec\x5d\x98\x87\x50\x14\x95\xfd\xb7\xd3\x39\x18\xc4\x25\x6d\x4c\xf0\x78\xd1\x10\x28\x52\x4e\xc6\xba\x71\xdc\xba\xaa\xa8\x77\x19\xae\xc5\xf2\x77\x1a\xb2\xae\x6e\xbb\xd0\x30\x7a\x5c\xdd\xd5\xc6\xef\x73\x31\xfa\xa1\x1e\x7d\x16\x95\xe5\x82\x4e\xc9\x25\x39\x1d\x29\x4e\x22\xc1\xa4\x59\x21\x18\xb6\x73\x80\x69\xdb\x8f\x8b\xbc\xac\xbf\x4c\x3d\xfc\xf3\x21\x11\x8b\x89\x72\x1b\xc5\xe6\x7e\x6a\xfa\x72\xdc\x20\x9d\x35\x64\xcb\x74\x4f\x5b\x19\xfb\xd9\x32\x9d\x62\xad\x2c\x21\xb1\x5e\x5b\x6b\xa7\x66\x97\x4f\x28\x53\xda\xdf\x00\x00\x00\xff\xff\xd4\xcf\x26\x81\x45\x02\x00\x00")

func staticCssMarc034CssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssMarc034Css,
		"static/css/marc-034.css",
	)
}

func staticCssMarc034Css() (*asset, error) {
	bytes, err := staticCssMarc034CssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/marc-034.css", size: 581, mode: os.FileMode(420), modTime: time.Unix(1515784865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/javascript/marc-034.js": staticJavascriptMarc034Js,
	"static/css/index.css": staticCssIndexCss,
	"static/css/marc-034.css": staticCssMarc034Css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"index.css": &bintree{staticCssIndexCss, map[string]*bintree{}},
			"marc-034.css": &bintree{staticCssMarc034Css, map[string]*bintree{}},
		}},
		"javascript": &bintree{nil, map[string]*bintree{
			"marc-034.js": &bintree{staticJavascriptMarc034Js, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
