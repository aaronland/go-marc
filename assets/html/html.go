// Code generated by go-bindata.
// sources:
// templates/html/marc-034.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlMarc034Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x6f\xdb\x3e\x0c\x3d\xff\xf2\x29\xf8\xd3\xb9\xaa\x3b\xb4\x18\x36\x4c\x0a\x50\x64\x2d\xb6\xc3\xb0\x61\x68\x81\xed\x48\xcb\x6c\xad\x56\x96\x34\x89\x76\x92\x7e\xfa\xc1\x7f\x92\x3a\x5d\x8a\xed\x14\x91\x78\x8f\x8f\x7c\x0c\xad\xfe\xff\xf8\x75\x75\xf3\xf3\xdb\x15\xd4\xdc\xb8\xe5\x42\xf5\x3f\xe0\xd0\xdf\x6b\x41\x5e\x2c\x17\x00\xaa\x26\xac\x96\x8b\xff\x00\x14\x5b\x76\xb4\xfc\x72\xf9\x7d\x05\x67\xe7\x17\xc0\x01\xca\xd0\xfa\xca\xfa\x7b\x28\xc3\x06\x38\x04\xa7\x8a\x11\x34\xe0\x1b\x62\x84\x9a\x39\x4a\xfa\xd5\xda\x4e\x8b\x55\xf0\x4c\x9e\xe5\xcd\x36\x92\x00\x33\x46\x5a\x30\x6d\xb8\xe8\x95\x3f\x80\xa9\x31\x65\x62\x7d\x7b\x73\x2d\xdf\x89\x59\x19\x8f\x0d\x69\x91\xe8\x8e\x52\xa2\x34\x23\x87\x64\xef\xad\x17\xaf\x28\xfe\x90\xb7\x97\x72\x15\x9a\x88\x6c\x4b\x37\x17\xfd\x7c\xa5\xdf\x0b\x28\xfe\x90\xc0\x18\x1d\xc9\x26\x94\xd6\x91\x5c\x53\x29\x31\x46\x69\x30\xe2\x21\x7d\x4b\xf9\x9f\xd9\x99\x91\xdb\x2c\x4b\x4c\x32\xf3\xf6\xa0\x4c\xe9\xd0\x3c\x1e\x2b\xf4\x09\x7d\x55\x93\xab\xae\x93\x25\x5f\xb9\xed\xdc\xae\xd4\xd2\x31\x4a\x67\x69\x1d\x43\xe2\x19\x74\x6d\x2b\xae\x75\x45\x9d\x35\x24\x87\xe0\x04\xac\xb7\x6c\xd1\xc9\x6c\xd0\x91\x7e\x73\x02\x0d\x6e\x6c\xd3\x36\xb3\x84\xf5\x87\x89\x36\x53\x1a\xa2\xde\x04\xed\xc3\xa0\xbe\x80\x5e\xdf\x59\xff\x08\x89\x9c\x16\xc3\x68\xb9\x26\x62\x01\x75\xa2\x3b\x2d\x0a\x93\x73\xd1\x60\x7c\x22\x7f\xfa\x90\x4f\x4d\xce\xd3\x9a\xb2\x49\x36\x32\xe4\x64\xb4\x28\x1e\xb0\xc3\x31\xb1\xc3\x36\xb6\xc7\x8b\xa5\x2a\xc6\xfc\x72\xb1\x78\x5d\x8a\xb7\x91\xa6\xbf\x50\x2f\x70\x28\x9d\x8c\x3c\x3b\xbf\x18\x94\x77\x86\x4d\xda\x33\xda\x73\x03\xe2\x58\x4b\x53\x8d\xc3\x86\x00\x54\x31\x1e\x06\x80\x2a\x43\xb5\xed\xfd\x00\x00\x55\xd9\x0e\x6c\xa5\x45\xcf\x13\x60\x1c\xe6\xac\x45\x0a\xeb\xe1\x96\x00\xd4\x5d\x48\xcd\xf8\x04\x50\xd6\xc7\x76\xde\x8a\x98\x36\xb9\x13\x15\xfb\x52\x63\x14\x1d\x1a\xaa\x83\xab\x28\x69\x71\xe5\x99\x12\x20\xec\xef\xb1\x43\xd7\x12\xd4\x94\x48\x8c\x6f\x2d\x04\x64\xfb\x44\x5a\xbc\xbd\x18\xe6\x9f\x64\xcb\x96\x39\xf8\xa1\x76\x6e\xcb\xc6\xee\x5d\x9c\xa2\xa5\x09\xbe\xa3\xc4\x2f\x2f\x5c\x15\x23\x73\x1a\xa5\x78\x9e\x45\x15\x95\xed\x5e\x5a\x90\x28\xb7\x8e\xf3\x6e\xf2\x5d\xba\x2c\xc3\xa6\x3f\x9e\xb9\x37\x13\xff\x85\x83\x71\x0e\x82\x88\x9e\xdc\x71\x68\xc2\xf5\xdf\xa0\xfb\x06\x55\x31\xae\x4b\x15\xe3\x27\xef\x77\x00\x00\x00\xff\xff\x5e\xb2\x8f\x4e\x03\x05\x00\x00")

func templatesHtmlMarc034HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlMarc034Html,
		"templates/html/marc-034.html",
	)
}

func templatesHtmlMarc034Html() (*asset, error) {
	bytes, err := templatesHtmlMarc034HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/marc-034.html", size: 1283, mode: os.FileMode(420), modTime: time.Unix(1515862424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/marc-034.html": templatesHtmlMarc034Html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"marc-034.html": &bintree{templatesHtmlMarc034Html, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

