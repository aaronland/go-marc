// Code generated by go-bindata.
// sources:
// templates/html/marc-034.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlMarc034Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x6f\xd4\x3e\x10\x3d\xff\xf2\x29\xe6\xe7\x73\xdd\x14\xb5\x42\x20\xec\x48\xd5\xd2\x0a\x0e\x08\x84\x5a\x09\x8e\x93\x64\xda\xb8\x75\x6c\x63\x4f\xb2\xbb\xfd\xf4\x28\x7f\x76\x9b\x2d\x5b\xc1\x25\xf1\x8c\xde\xbc\x37\xf3\x9c\x89\xfa\xff\xe3\xd7\xd5\xcd\xcf\x6f\x57\xd0\x70\x6b\x8b\x4c\x0d\x2f\xb0\xe8\xee\xb5\x20\x27\x8a\x0c\x40\x35\x84\x75\x91\xfd\x07\xa0\xd8\xb0\xa5\xe2\xcb\xe5\xf7\x15\x9c\x9d\x5f\x00\x7b\x28\x7d\xe7\x6a\xe3\xee\xa1\xf4\x1b\x60\xef\xad\xca\x27\xd0\x88\x6f\x89\x11\x1a\xe6\x20\xe9\x57\x67\x7a\x2d\x56\xde\x31\x39\x96\x37\xdb\x40\x02\xaa\x29\xd2\x82\x69\xc3\xf9\xa0\xfc\x01\xaa\x06\x63\x22\xd6\xb7\x37\xd7\xf2\x9d\x58\xd0\x38\x6c\x49\x8b\x48\x77\x14\x23\xc5\x45\xb1\x8f\xe6\xde\x38\xf1\x8a\xe2\x0f\x79\x7b\x29\x57\xbe\x0d\xc8\xa6\xb4\x4b\xd1\xcf\x57\xfa\xbd\x80\xfc\x0f\x09\x0c\xc1\x92\x6c\x7d\x69\x2c\xc9\x35\x95\x12\x43\x90\x15\x06\x3c\x2c\xdf\x52\xfa\xe7\xea\xc4\xc8\x5d\x92\x25\x46\x99\x78\x7b\x40\x53\x5a\xac\x1e\x8f\x11\x7d\x42\x57\x37\x64\xeb\xeb\x68\xc8\xd5\x76\xbb\xb4\x2b\x76\x74\xac\xa4\x37\xb4\x0e\x3e\xf2\x02\xba\x36\x35\x37\xba\xa6\xde\x54\x24\xc7\xe0\x04\x8c\x33\x6c\xd0\xca\x54\xa1\x25\xfd\xe6\x04\x5a\xdc\x98\xb6\x6b\x17\x09\xe3\x0e\x13\x5d\xa2\x38\x46\x83\x09\xda\xf9\x51\x3d\x83\x41\xdf\x1a\xf7\x08\x91\xac\x16\xe3\x68\xa9\x21\x62\x01\x4d\xa4\x3b\x2d\xf2\x2a\xa5\xbc\xc5\xf0\x44\xee\xf4\x21\x9d\x56\x29\xcd\xd7\x94\xaa\x68\x02\x43\x8a\x95\x16\xf9\x03\xf6\x38\x25\x76\xd8\xd6\x0c\x78\x51\xa8\x7c\xca\x17\x59\xf6\xba\x14\x6f\x03\xcd\x9f\xd0\x20\x70\x28\x1d\x2b\x79\x76\x7e\x31\x2a\xef\x0c\x9b\xb5\x17\x65\xcf\x0d\x88\x63\x2d\xcd\x1c\x87\x0d\x01\xa8\x7c\x5a\x0c\x00\x55\xfa\x7a\x0b\x35\x32\xca\x69\x00\x89\xc1\xc8\x47\xda\x6a\x21\x0a\x00\x80\x2c\x1b\x9e\xaa\x36\x3d\x98\x5a\x8b\x81\x52\x40\x65\x31\x25\x2d\xa2\x5f\x8f\x6b\x06\xa0\xee\x7c\x6c\xa7\x23\x80\x32\x2e\x74\xcb\x2e\xc5\x7c\xc9\xbb\x7e\xc4\x9e\x6a\x8a\x82\xc5\x8a\x1a\x6f\x6b\x8a\x5a\x5c\x39\xa6\x08\x08\xfb\x55\xed\xd1\x76\x04\x0d\x45\x12\xd3\x59\x0b\x01\xc9\x3c\x91\x16\x6f\x2f\x46\x6b\x66\xd9\xb2\x63\xf6\x6e\xe4\x4e\x5d\xd9\x9a\xbd\xc1\x73\x54\x54\xde\xf5\x14\xf9\xe5\xf2\xab\x7c\xaa\x9c\x47\xc9\x9f\x67\x51\x79\x6d\xfa\xe2\x85\x05\x91\x52\x67\x39\xed\x26\xdf\xa5\xcb\xd2\x6f\x86\xbd\x5a\x7a\x33\xd7\xbf\x70\x30\x2c\x41\x10\xd0\x91\x3d\x0e\x8d\xb8\xfe\x1b\x74\xdf\xa0\xca\x87\x9b\x2c\x32\x95\x4f\x7f\xc3\xdf\x01\x00\x00\xff\xff\x15\xeb\x7c\x04\x1e\x05\x00\x00")

func templatesHtmlMarc034HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlMarc034Html,
		"templates/html/marc-034.html",
	)
}

func templatesHtmlMarc034Html() (*asset, error) {
	bytes, err := templatesHtmlMarc034HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/marc-034.html", size: 1310, mode: os.FileMode(420), modTime: time.Unix(1515814035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/marc-034.html": templatesHtmlMarc034Html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"marc-034.html": &bintree{templatesHtmlMarc034Html, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

