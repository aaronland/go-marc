// Code generated by go-bindata.
// sources:
// templates/html/marc-034.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlMarc034Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x6f\xd4\x3c\x10\x3d\x7f\xfb\x2b\xe6\x9b\x73\x4d\x8a\x5a\x21\x10\x76\xa4\x6a\x69\x05\x07\x04\x42\xad\x04\xc7\x49\x32\x6d\xdc\x3a\xb6\xb1\x27\xd9\x5d\x7e\x3d\x4a\xb2\xdd\xa6\xa5\x08\xc4\x69\x3d\x4f\xf3\xde\xf3\x3c\x67\x56\xff\xff\xee\xd3\xfa\xf2\xdb\xe7\x73\x68\xa5\x73\xe5\x4a\x8f\x3f\xe0\xc8\xdf\x18\x64\x8f\xe5\x0a\x40\xb7\x4c\x4d\xb9\xfa\x0f\x40\x8b\x15\xc7\xe5\xc7\xb3\x2f\x6b\x38\x3e\x39\x05\x09\x50\x85\xde\x37\xd6\xdf\x40\x15\xb6\x20\x21\x38\x5d\xcc\x4d\x53\x7f\xc7\x42\xd0\x8a\x44\xc5\xdf\x7b\x3b\x18\x5c\x07\x2f\xec\x45\x5d\xee\x22\x23\xd4\x73\x65\x50\x78\x2b\xc5\xe8\xfc\x16\xea\x96\x52\x66\x31\x57\x97\x17\xea\x35\x2e\x64\x3c\x75\x6c\x30\xf1\x35\xa7\xc4\x69\x41\x0e\xc9\xde\x58\x8f\xbf\x71\xfc\xaa\xae\xce\xd4\x3a\x74\x91\xc4\x56\x6e\x69\xfa\xe1\xdc\xbc\x41\x28\x7e\xb1\xa0\x18\x1d\xab\x2e\x54\xd6\xb1\xda\x70\xa5\x28\x46\x55\x53\xa4\xc7\xf4\x1d\xe7\xbf\x66\x67\x21\xe9\xb3\xaa\x28\xa9\x2c\xbb\x47\x32\x95\xa3\xfa\xee\x39\xa1\xf7\xe4\x9b\x96\x5d\x73\x91\x2c\xfb\xc6\xed\x96\x71\xa5\x9e\x9f\xa3\x0c\x96\x37\x31\x24\x59\xb4\x6e\x6c\x23\xad\x69\x78\xb0\x35\xab\xa9\x38\x02\xeb\xad\x58\x72\x2a\xd7\xe4\xd8\xbc\x3c\x82\x8e\xb6\xb6\xeb\xbb\x05\x60\xfd\x63\xa0\xcf\x9c\xa6\x6a\x0c\xc1\xf8\x30\xb9\xaf\x00\xc6\x0b\x38\xeb\xef\x20\xb1\x33\x38\xcd\x96\x5b\x66\x41\x90\x5d\xe4\xfd\xc3\xd6\x39\x23\xb4\x89\xaf\x0d\x8e\xe7\xc2\xfa\x86\xb7\x2f\x26\x74\x54\xf9\x27\x8d\x8e\x52\xad\x8e\x4f\x4e\x0f\x32\xa3\x4a\xae\x93\x8d\xb2\xa4\xdd\xd2\x40\x33\x8a\x90\x53\x6d\x70\x81\x3c\x68\xdc\x66\x2c\x75\x31\xa3\xd3\x17\x5f\xcc\x9f\x3c\x80\xae\x42\xb3\x2b\x01\x00\xc6\x69\x01\x74\x63\x07\xb0\x8d\xc1\x91\x8b\x50\x3b\xca\xd9\x60\x0a\x9b\x69\x53\x00\xf4\x75\x48\xdd\x7c\x04\xd0\xd6\xc7\x7e\x79\x1d\xdc\xbf\xd3\xbd\x31\x1e\xa4\xe6\x2a\x3a\xaa\xb9\x0d\xae\xe1\x64\xf0\xdc\x0b\x27\x20\x38\x6c\xdb\x40\xae\x67\x68\x39\x31\xce\x67\x83\x08\xd9\xfe\x60\x83\xaf\x4e\xa7\x0c\xf6\xb6\x55\x2f\x12\xfc\xa4\x9d\xfb\xaa\xb3\x87\x24\xf7\x55\x59\x07\x3f\x70\x92\xa7\xfb\xab\x8b\x99\xb9\x1f\xa5\x78\x98\x45\x17\x8d\x1d\xca\x27\x11\x24\xce\xbd\x93\x7c\x3f\xf9\x3d\x5c\x55\x61\x3b\xae\xc6\x32\x9b\x3d\xff\x49\x82\x71\xd9\x04\x91\x3c\xbb\xe7\x5b\x13\x6d\xfe\xd4\x7a\xb8\xa0\x2e\xa6\x27\x5b\xe9\x62\xfe\x43\xfb\x19\x00\x00\xff\xff\xba\x34\x29\x7a\xe1\x04\x00\x00")

func templatesHtmlMarc034HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlMarc034Html,
		"templates/html/marc-034.html",
	)
}

func templatesHtmlMarc034Html() (*asset, error) {
	bytes, err := templatesHtmlMarc034HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/marc-034.html", size: 1249, mode: os.FileMode(420), modTime: time.Unix(1515784900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/marc-034.html": templatesHtmlMarc034Html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"marc-034.html": &bintree{templatesHtmlMarc034Html, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

