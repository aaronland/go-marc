// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5f\x6b\xdb\x30\x10\x7f\x6e\x3e\xc5\x4d\x4f\x0d\x44\x75\x47\xfb\xb0\x51\x39\x50\xb2\x94\x0e\x32\x3a\x46\x0a\xdb\xe3\xd9\xba\xc4\xda\x64\x49\x93\xcf\x4e\xcc\xd8\x77\x1f\xb6\xc2\xe6\xb0\x0e\xf6\x92\xe8\x77\xfa\xfd\x39\x4e\x67\xf5\xea\xdd\xd3\x6a\xfb\xe5\xe3\x1a\x2a\xae\xed\x72\xa6\x86\x3f\xb0\xe8\xf6\xb9\x20\x27\x96\x33\x00\x55\x11\xea\xe5\xec\x02\x40\xb1\x61\x4b\xcb\x0f\xf7\x9f\x56\x70\x7d\x73\x0b\xec\xa1\xf0\xad\xd3\xc6\xed\xa1\xf0\x47\x60\xef\xad\xca\x12\x69\xe4\xd7\xc4\x08\x15\x73\x90\xf4\xbd\x35\x5d\x2e\x56\xde\x31\x39\x96\xdb\x3e\x90\x80\x32\xa1\x5c\x30\x1d\x39\x1b\x92\xef\xa0\xac\x30\x36\xc4\xf9\xf3\xf6\x41\xbe\x11\x13\x1b\x87\x35\xe5\x22\xd2\x8e\x62\xa4\x38\x11\xfb\x68\xf6\xc6\x89\x7f\x24\x7e\x96\xcf\xf7\x72\xe5\xeb\x80\x6c\x0a\x3b\x0d\x7d\xbf\xce\xdf\x0a\xc8\xfe\x8a\xc0\x10\x2c\xc9\xda\x17\xc6\x92\x3c\x50\x21\x31\x04\x59\x62\xc0\x73\x79\x4f\xcd\x7f\xab\x1b\x46\x6e\x1b\x59\x60\x94\x0d\xf7\x67\x36\x85\xc5\xf2\xdb\x4b\x46\x8f\xe8\x74\x45\x56\x3f\x44\x43\x4e\xdb\x7e\x3a\xae\xd8\xd2\x4b\x92\xce\xd0\x21\xf8\xc8\x13\xea\xc1\x68\xae\x72\x4d\x9d\x29\x49\x8e\x60\x01\xc6\x19\x36\x68\x65\x53\xa2\xa5\xfc\xf5\x02\x6a\x3c\x9a\xba\xad\x27\x05\xe3\xce\x0b\x6d\x43\x71\x44\xc3\x10\x72\xe7\xc7\xf4\xd9\x05\xa8\xa6\x8c\x26\x30\x70\x1f\xe8\xf4\x8c\x5f\xb1\xc3\x54\x4d\x4f\x02\x07\xe3\xb4\x3f\x5c\xa1\xd6\xeb\x8e\x1c\x6f\x4c\xc3\xe4\x28\x5e\x0a\xeb\x51\x8b\x05\xec\x5a\x57\xb2\xf1\x0e\x06\x7c\x49\x03\x67\xfe\x63\x54\x96\xde\x35\xde\xd2\x95\xf5\xfb\x4b\xf1\xb8\xde\x6c\x9e\xc4\x7c\xbc\xf8\x39\xbf\x1b\xc2\xb3\x94\x33\x2e\x69\x96\xb6\x14\x40\x15\x5e\xf7\xc3\x01\x60\xfc\x51\x3b\x1f\xeb\x84\x01\x94\x71\xa1\x9d\xb6\x2b\x4e\xa3\xbb\xbe\xb9\x15\x10\x2c\x96\x54\x79\xab\x29\xe6\x62\xed\x98\x22\x20\xfc\xde\xf6\x0e\x6d\x4b\x50\x51\x24\x91\xce\xb9\x18\xc7\x70\x72\x2e\x5a\x66\xef\x4e\xd6\x4d\x5b\xd4\x86\xc5\x72\xe5\x5d\x47\x91\x55\x96\x6e\x13\x59\x65\x7f\x5a\x1a\x5b\x4f\x1d\xab\x2c\x7d\x82\xbf\x02\x00\x00\xff\xff\xc2\xde\x59\x4e\x93\x03\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 915, mode: os.FileMode(420), modTime: time.Unix(1515771556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

